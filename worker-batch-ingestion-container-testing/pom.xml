<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2019-2024 Open Text.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.cafdataprocessing</groupId>
        <artifactId>staging-service-aggregator</artifactId>
        <version>3.1.0-SNAPSHOT</version>
    </parent>

    <artifactId>worker-batch-ingestion-container-testing</artifactId>

    <properties>
        <maven.javadoc.skip>true</maven.javadoc.skip>
        <maven.install.skip>true</maven.install.skip>
        <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
        <test.data>${project.basedir}/test-data/input</test.data>

        <jobServiceDatabaseName>jobservice</jobServiceDatabaseName>
        <postgresPassword>mysecretpassword</postgresPassword>
        <postgresUser>postgres</postgresUser>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafdataprocessing</groupId>
            <artifactId>worker-document-shared</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>worker-batch-shared</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>worker-batch-testing</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-common</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>com.github.jobservice</groupId>
                        <artifactId>job-service-contract</artifactId>
                        <version>7.0.0-334</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>generate-client-code-for-job-service</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>/com/hpe/caf/services/job/swagger.yaml</inputSpec>
                            <generatorName>java</generatorName>
                            <output>${project.build.directory}/openapi-codegen/job-service</output>
                            <apiPackage>com.github.cafdataprocessing.worker.ingestion.testing.restclients.job_service.api</apiPackage>
                            <modelPackage>com.github.cafdataprocessing.worker.ingestion.testing.restclients.job_service.model</modelPackage>
                            <invokerPackage>com.github.cafdataprocessing.worker.ingestion.testing.restclients.job_service.client</invokerPackage>
                            <configOptions>
                                <additionalModelTypeAnnotations>@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)</additionalModelTypeAnnotations>
                                <disallowAdditionalPropertiesIfNotPresent>false</disallowAdditionalPropertiesIfNotPresent>
                                <library>jersey3</library>
                            </configOptions>
                            <generateModelTests>false</generateModelTests>
                            <generateModelDocumentation>false</generateModelDocumentation>
                            <generateApiTests>false</generateApiTests>
                            <generateApiDocumentation>false</generateApiDocumentation>
                            <addCompileSourceRoot>false</addCompileSourceRoot>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-openapi-codegen-files</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/openapi</outputDirectory>
                            <resources>
                                <resource>
                                    <targetPath>job-service-client</targetPath>
                                    <directory>${project.build.directory}/openapi-codegen/job-service/src/main/java</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-openapi-codegen-files</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/openapi/job-service-client</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin for running integration tests in the integration-test phase -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <docker.host.address>${docker.host.address}</docker.host.address>
                        <worker.adminport>${worker.adminport}</worker.adminport>
                        <rabbitmq.node.port>${rabbitmq.node.port}</rabbitmq.node.port>
                        <rabbitmq.ctrl.port>${rabbitmq.ctrl.port}</rabbitmq.ctrl.port>
                        <input.folder>${test.data}</input.folder>
                        <expected.folder>${test.data}</expected.folder>
                        <datastore.enabled>false</datastore.enabled>
                    </systemPropertyVariables>
                    <environmentVariables>
                        <CAF_CONFIG_DECODER>JavascriptDecoder</CAF_CONFIG_DECODER>
                        <CAF_CONFIG_ENABLE_SUBSTITUTOR>false</CAF_CONFIG_ENABLE_SUBSTITUTOR>
                        <CAF_WORKER_DATASTORE_PATH>datastore</CAF_WORKER_DATASTORE_PATH>
                        <CAF_RABBITMQ_PREFETCH_BUFFER>1000</CAF_RABBITMQ_PREFETCH_BUFFER>
                        <CAF_WORKER_RETRY_LIMIT>2</CAF_WORKER_RETRY_LIMIT>
                        <CAF_WORKER_MAX_BATCH_SIZE>2</CAF_WORKER_MAX_BATCH_SIZE>
                        <CAF_WORKER_MAX_BATCH_TIME>5000</CAF_WORKER_MAX_BATCH_TIME>
                        <JOB_SERVICE_ADDRESS>http://${docker.host.address}:${job-service.adminport}/job-service/v1</JOB_SERVICE_ADDRESS>
                        <RABBITMQ_TEST_HOST>${docker.host.address}</RABBITMQ_TEST_HOST>
                        <RABBITMQ_TEST_PORT>${rabbitmq.node.port}</RABBITMQ_TEST_PORT>
                        <RABBITMQ_TEST_USERNAME>guest</RABBITMQ_TEST_USERNAME>
                        <RABBITMQ_TEST_PASSWORD>guest</RABBITMQ_TEST_PASSWORD>
                        <CAF_BATCH_WORKER_ERROR_QUEUE>test-output</CAF_BATCH_WORKER_ERROR_QUEUE>
                    </environmentVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-docker-container</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <autoPull>on</autoPull>
                    <logDate>default</logDate>
                    <containerNamePattern>%a-%t</containerNamePattern>
                    <images>
                        <!-- Run the WebDav image to simulate the RFS -->
                        <image>
                            <alias>webdav</alias>
                            <name>${project.artifactId}-test-webdav:${project.version}</name>
                            <build>
                                <from>${dockerHubPublic}/cloudesire/webdav</from>
                                <assembly>
                                    <basedir>/</basedir>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <directory>test-data/input</directory>
                                                <outputDirectory>srv/common/webdav</outputDirectory>
                                            </fileSet>
                                        </fileSets>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <volumes>
                                    <bind>
                                        <volume>/srv/common/webdav</volume>
                                    </bind>
                                </volumes>
                                <ports>
                                    <port>${webdav.apache.port}:8080</port>
                                </ports>
                                <env>
                                    <APACHE_PORT>8080</APACHE_PORT>
                                </env>
                                <wait>
                                    <log>WebDAV Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${webdav.apache.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- Run the RabbitMQ image. -->
                        <image>
                            <alias>rabbitmq</alias>
                            <name>${dockerHubPublic}/library/rabbitmq:3-management</name>
                            <run>
                                <ports>
                                    <port>${rabbitmq.ctrl.port}:15672</port>
                                    <port>${rabbitmq.node.port}:5672</port>
                                </ports>
                                <wait>
                                    <log>Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${rabbitmq.ctrl.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- Job Service and DB -->
                        <image>
                            <alias>postgres</alias>
                            <name>${dockerHubPublic}/library/postgres:14</name>
                            <run>
                                <env>
                                    <POSTGRES_DB>${jobServiceDatabaseName}</POSTGRES_DB>
                                    <POSTGRES_PASSWORD>${postgresPassword}</POSTGRES_PASSWORD>
                                    <POSTGRES_USER>${postgresUser}</POSTGRES_USER>
                                </env>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <ports>
                                    <port>${postgres.port}:5432</port>
                                </ports>
                                <wait>
                                    <log>PostgreSQL init process complete</log>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <image>
                            <alias>job-service</alias>
                            <name>${dockerHubPublic}/jobservice/job-service:5</name>
                            <run>
                                <ports>
                                    <port>${job-service.adminport}:8080</port>
                                </ports>
                                <env>
                                    <CAF_STATUS_CHECK_TIME>5</CAF_STATUS_CHECK_TIME>
                                    <CAF_WEBSERVICE_URL>http://job-service:8080/job-service/v1</CAF_WEBSERVICE_URL>
                                    <CAF_RABBITMQ_USERNAME>guest</CAF_RABBITMQ_USERNAME>
                                    <CAF_RABBITMQ_PASSWORD>guest</CAF_RABBITMQ_PASSWORD>
                                    <CAF_APPNAME>test/worker-ingestion</CAF_APPNAME>
                                    <CAF_CONFIG_PATH>/config</CAF_CONFIG_PATH>
                                    <CAF_RABBITMQ_HOST>rabbitmq</CAF_RABBITMQ_HOST>
                                    <CAF_RABBITMQ_PORT>5672</CAF_RABBITMQ_PORT>
                                    <CAF_SCHEDULER_INPUT_QUEUE>jobservicescheduler-in</CAF_SCHEDULER_INPUT_QUEUE>
                                    <CAF_TRACKING_PIPE>worker-jobtracking-in</CAF_TRACKING_PIPE>
                                    <CAF_DATABASE_USERNAME>${postgresUser}</CAF_DATABASE_USERNAME>
                                    <CAF_DATABASE_PASSWORD>${postgresPassword}</CAF_DATABASE_PASSWORD>
                                    <CAF_DATABASE_URL>jdbc:postgresql://postgres:5432/${jobServiceDatabaseName}</CAF_DATABASE_URL>
                                </env>
                                <links>
                                    <link>rabbitmq</link>
                                    <link>postgres</link>
                                </links>
                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${job-service.adminport}</url>
                                    </http>
                                    <time>300000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- Run the Job Service Scheduled Executor -->
                        <image>
                            <alias>job-service-scheduled-executor</alias>
                            <name>${dockerHubPublic}/jobservice/job-service-scheduled-executor:6</name>
                            <run>
                                <ports>
                                    <port>${scheduler-worker.adminport}:8081</port>
                                </ports>
                                <env>
                                    <JOB_SERVICE_DATABASE_HOST>postgres</JOB_SERVICE_DATABASE_HOST>
                                    <JOB_SERVICE_DATABASE_PORT>5432</JOB_SERVICE_DATABASE_PORT>
                                    <JOB_SERVICE_DATABASE_NAME>jobservice</JOB_SERVICE_DATABASE_NAME>
                                    <JOB_SERVICE_DATABASE_APPNAME>Job Service Scheduled Executor</JOB_SERVICE_DATABASE_APPNAME>
                                    <JOB_SERVICE_DATABASE_USERNAME>${postgresUser}</JOB_SERVICE_DATABASE_USERNAME>
                                    <JOB_SERVICE_DATABASE_PASSWORD>${postgresPassword}</JOB_SERVICE_DATABASE_PASSWORD>
                                    <CAF_TRACKING_PIPE>jobtrackingworker-test-input-1</CAF_TRACKING_PIPE>
                                    <CAF_STATUS_CHECK_INTERVAL_SECONDS>1</CAF_STATUS_CHECK_INTERVAL_SECONDS>
                                    <CAF_WEBSERVICE_URL>http://job-service:8080/job-service/v1</CAF_WEBSERVICE_URL>
                                    <CAF_RABBITMQ_HOST>rabbitmq</CAF_RABBITMQ_HOST>
                                    <CAF_RABBITMQ_PORT>5672</CAF_RABBITMQ_PORT>
                                    <CAF_RABBITMQ_USERNAME>guest</CAF_RABBITMQ_USERNAME>
                                    <CAF_RABBITMQ_PASSWORD>guest</CAF_RABBITMQ_PASSWORD>
                                    <CAF_SCHEDULED_EXECUTOR_PERIOD>2</CAF_SCHEDULED_EXECUTOR_PERIOD>
                                    <CAF_WORKER_INPUT_QUEUE>jobservicescheduler-in</CAF_WORKER_INPUT_QUEUE>
                                </env>
                                <links>
                                    <link>rabbitmq</link>
                                    <link>postgres</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${scheduler-worker.adminport}/healthcheck</url>
                                    </http>
                                    <time>200000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- Begin Worker Ingestion image -->
                        <image>
                            <alias>worker-ingestion</alias>
                            <name>${dockerImagePrefix}${dockerHubOrganization}${dockerOrgSeperator}worker-ingestion${dockerProjectVersion}</name>
                            <run>
                                <ports>
                                    <port>${worker.adminport}:8081</port>
                                </ports>
                                <env>
                                    <CAF_STAGING_SERVICE_BASEPATH>/srv/common/webdav</CAF_STAGING_SERVICE_BASEPATH>
                                    <CAF_BATCH_WORKER_ERROR_QUEUE>test-output</CAF_BATCH_WORKER_ERROR_QUEUE>
                                    <CAF_RABBITMQ_MAX_ATTEMPTS>3</CAF_RABBITMQ_MAX_ATTEMPTS>
                                    <CAF_RABBITMQ_BACKOFF_INTERVAL>5</CAF_RABBITMQ_BACKOFF_INTERVAL>
                                    <CAF_RABBITMQ_MAX_BACKOFF_INTERVAL>15</CAF_RABBITMQ_MAX_BACKOFF_INTERVAL>
                                    <CAF_RABBITMQ_HOST>rabbitmq</CAF_RABBITMQ_HOST>
                                    <CAF_RABBITMQ_PORT>5672</CAF_RABBITMQ_PORT>
                                    <CAF_RABBITMQ_USERNAME>guest</CAF_RABBITMQ_USERNAME>
                                    <CAF_RABBITMQ_PASSWORD>guest</CAF_RABBITMQ_PASSWORD>
                                    <CAF_WORKER_INPUT_QUEUE>ingestion-batch-in</CAF_WORKER_INPUT_QUEUE>
                                </env>
                                <volumes>
                                    <from>
                                        <image>webdav</image>
                                    </from>
                                </volumes>
                                <links>
                                    <link>rabbitmq</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${worker.adminport}/healthcheck</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- End IngestionWorker image -->
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- Use this profile if your virtual machine setup must use fixed ports. -->
        <profile>
            <id>use-default-fixed-ports</id>
            <properties>
                <rabbitmq.ctrl.port>15672</rabbitmq.ctrl.port>
                <rabbitmq.node.port>5672</rabbitmq.node.port>
                <webdav.apache.port>8080</webdav.apache.port>
                <worker.adminport>8081</worker.adminport>
                <job-service.adminport>28003</job-service.adminport>
                <postgres.port>25432</postgres.port>
                <scheduler-worker.adminport>8087</scheduler-worker.adminport>
            </properties>
        </profile>
        <!-- Use this profile to skip integration tests. -->
        <profile>
            <id>skip-integration-tests</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
